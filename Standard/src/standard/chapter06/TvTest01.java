package standard.chapter06;

//------객체 지향 언어------

//객체지향 언어의 특징:
//1. 코드의 재사용성이 높다.
//2. 코드의 관리가 용이하다.
//3. 신뢰성이 높은 프로그래밍을 가능하게 한다.

//재사용성, 유지보수, 중복제거에 초점을 두면 쉽게 이해할 수 있다

//------클래스와 객체------

//클래스의 정의 : 클래스란 객체를 정의해 놓은 것이다.
//클래스의 용도 : 글래스는 객체를 생성하는데 사용된다 (설계도)

//객체 : 실제로 존재하는 것.

//우리가 원하는 기능의 객체를 사용하기 위해서는 먼저 클래스로부터 객체를 생성하는 과정이 선행되어야 한다.

//클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화(instantiate)라고 하며
//어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스(instance)라고 한다

//결국 인스턴스와 객체는 같은 의미이지만, 객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖고 있으며,
//인스턴스는 어떤 클래스로부터 만들어진 것인지를 강조하는 보다 구체적인 의미를 갖고 있다.

//객체는 속성과 기능의 집합이라고 할 수 있다. 속성과 기능들을 그 객체의 멤버(구성원)라 한다.
//클래스란 객체를 정의한 것이므로 클래스에는 객체의 모든 속성과 기능이 정의되어있다.
//클래스로부터 객체를 생성하면, 클래스에 정의된 속성과 기능을 가진 객체가 만들어지는 것이다.

//속성보다는 멤버변수라는 말을, 
//기능보다는 메서드라는 말을 주로 사용할 것이다.

// 속성(property) : 멤버변수(member variable), 특성(attribute), 필드(field), 상태(state)
// 기능(function) : 메서드(method), 함수(function), 행위(behavior)

class Tv { //기본적으로 같은 패키지 안의 다른 클래스에서도 사용할 수 있다
	//Tv의 속성(멤버변수)
	String color;		// 색상
	boolean power;		// 전원상태 (on/off)
	int channel;		// 채널
	
	//Tv의 기능(메서드)
	void power() { power = !power; }	// TV를 켜거나 끄는 기능을 하는 메서드
	void channelUp() { ++channel; }		// TV의 채널을 높이는 기능을 하는 메서드
	void channelDown() {--channel; }	// TV의 채널을 낮추는 기능을 하는 메서드
}

class TvTest01 {
	public static void main(String[] args) {
		Tv t;				// Tv인스턴스를 참조하기 위한 변수 t를 선언
		t = new Tv();		// Tv인스턴스를 생성한다.
		t.channel = 7;		// Tv인스턴스의 멤버변수 channel의 값을 7로 한다.
		t.channelDown();	// Tv인스턴스의 메서드 channelDown()을 호출한다.
		System.out.println("현재 채널은 " + t.channel + " 입니다."); // 현재 채널은 6 입니다.
	}
	
	//인스턴스를 다루기 위해서는 참조변수가 반드시 필요하다
	//new연산자로 Tv인스턴스를 생성했을 때, color는 참조형이므로 null로, boolean은 false로, channel은 0으로 기본값으로 초기화 된다
	//t.channel = 7; 로 인해 channel이 0에서 7로 바뀐다 (7로 새로 덮어씌워짐)
	//t.channelDown()으로 --channel이 수행되어 channel이 7에서 6으로 바뀐다 (6으로 새로 덮어씌워짐)
	//t.channel을 출력하면 6이 출력된다
	
	// ** 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다
}
